@startuml API_Class_Diagram

'*********'
'* DTO's *'
'*********'

class LoginDto {
    +string Username
    +string Password
}

class RegisterDto {
    +string Username
    +string Password
}

class UserDto {
    +int Id
    +string Username
}
UserDto "1" o-> "many" RoleDto

class TokenDto {
    +string TokenString
    +int ExpiresIn
}

class CreateTournamentDto {
    +string Type
    +int GameTypeId
    +DateTime StartDate
    +bool RandomnizeTeams
    +IEnumerable<Teams> Teams
}

class TournamentDto {
    +int Id
    +string Type
    +GameTypeDto GameType
    +DateTime StartDate
    +UserDto CreatedBy
    +IEnumerable<MatchupDto> Matchups
}
TournamentDto "1" o-> "many" MatchupDto
TournamentDto "many" o-> "1" GameTypeDto

class MatchupDto {
    +int Id
    +int Round
    +int WamId
    +IEnumerable<TeamDto> Teams
}
MatchupDto "1" o-> "many" TeamDto

class TeamDto {
    +int Id
    +string TeamName
    +int Score
    +IEnumerable<PlayerDto> Players
}
TeamDto "1" o-> "many" PlayerDto

class PlayerDto {
    +int Id
    +string FirstName
    +string LastName
}

class GameTypeDto {
    +int Id
    +string Name
    +int TeamsPerMatch
    +int PointsForDraw
    +int PointsForWin
}

'***************'
'* Controllers *'
'***************'
class UserController {
    -IUserRepository _userRepository
    +Task<ActionResult<IEnumerable<UserDto>>> Get()
    +Task<ActionResult<UserDto>> Get(int id)
    +Task<ActionResult<UserDto>> Update(int id, UserDto dto)
    +Task<ActionResult<UserDto>> Delete(int id)  
}
UserDto <-- UserController : Uses
UserController ....> IUserRepository : Dependency

class AuthController {
    -IHashingService _hashService
    -ITokenService _tokenService
    +Task<ActionResult<TokenDto>> Login(LoginDto loginDetails)
    +Task<ActionResult>> Register(RegisterDto registerDetails)
    +Task<ActionResult<bool>> ValidateToken(TokenDto token)
}
AuthController ..> ITokenService : Dependency
TokenDto <-- AuthController : Uses
LoginDto <-- AuthController : Uses
RegisterDto <-- AuthController : Uses

class TournamentController {
    -ITournamentRepository _tournamentRepository
    -IMatchupBuilder _matchupBuilder
    +Task<ActionResult<IEnumerable<TournamentType>>> GetTypes()
    +Task<ActionResult<IEnumerable<TournamentDto>>> Get()
    +Task<ActionResult<TournamentDto>> GetById(int id)
    +Task<ActionResult> Create(CreateTournamentDto dto)
    +Task<ActionResult> Edit(TournamentDto dtoChanges)
    +Task<ActionResult> Delete(int id)
}
TournamentController ....> ITournamentRepository : Dependency
TournamentController ..> IMatchupBuilder : Dependency
TournamentDto <-- TournamentController : Uses
CreateTournamentDto <-- TournamentController : Uses 
TournamentController ----> TournamentType : Uses

'************'
'* Services *'
'************'

interface IHashingService {
    +string HashPassword(string password, string salt)
}

class HashProcessor {
}
IHashingService <|.. HashProcessor : implements


interface ISaltService {
    +string GenerateSalt()
}

class SaltProcessor {
}
ISaltService <|.. SaltProcessor : implements


interface ITokenService {
    +TokenDto BuildNewToken(UserDto user)
}
UserDto <--- ITokenService

class TokenProcessor {
    +TokenDto BuildNewToken()
}
TokenDto <-- TokenProcessor
ITokenService <|.. TokenProcessor : implements

interface IMatchupBuilder {
    +IEnumerable<TeamDto> BuildRandomTeams(IEnumerable<PlayerDto> players)
    +IEnumerable<MatchupDto> BuildMatchups(TournamentType type, IEnumerable<TeamDto> teams)
}

abstract class TournamentFactory {
    +{abstract}TournamentDto Create()
} 

class KnockoutTournamentFactory {
    +TournamentDto Create()
}
TournamentFactory <|-- KnockoutTournamentFactory : inherits

'**********'
'* Models *'
'**********'

enum TournamentType {
    Knockout
}

class User {
    +int Id
    +string Username
    +string PasswordHash
    +int Salt
}

class Tournament {
    +TournamentType Id
    +int Type
    +DateTime StartDate
    +int UserId
    +User CreatedBy
    +GameType GameType
    +IEnumerable<Matchup> Matches
}
Tournament o--> TournamentType
Tournament "1" o--> "many" Matchup 
Tournament "many" o--> "1" User
Tournament "many" o--> "1" GameType

class Team {
    +int Id
    +string TeamName
    +IEnumerable<Player> Players
}
Team "1" o--> "many" Player

class Player {
    +int Id
    +string FirstName
    +string LastName
    +int TeamId
    +Team Team
}

class Matchup {
    +int Id
    +int Round
    +int TournamentId
    +Tournament Tournament
    +int WamId
    +IEnumerable<MatchupTeamData> Teams
}

class MatchupTeamData {
    +int Id
    +int TeamId
    +Team Team
    +int MatchId
    +Matchup Matchup
    +int Score
}
MatchupTeamData "many" o--> "1" Matchup
MatchupTeamData "many" o--> "1" Team

class GameType {
    +int Id
    +string Name
    +int TeamsPerMatch
    +int PointsForDraw
    +int PointsForWin
}

'****************'
'* Repositories *'
'****************'

interface IUserRepository {
    +Task<IEnumerable<UserDto>> GetAll() 
    +Task<UserDto?> GetById(int id)
    +Task<UserDto?> GetByUsername(string username)
    +Task<bool> VerifyLogin(string username, string PasswordHash)
    +Task Create(UserDto user)
    +Task Update(UserDto userChanges)
    +Task Delete(int id)
}
User <--* UserRepository
UserDto <-- IUserRepository : Uses

class UserRepository {
    -DbContext _context
}
IUserRepository <|.. UserRepository : implements
IUserRepository ..> IHashingService : Dependency
IUserRepository ..> ISaltService : Dependency

interface ITournamentRepository {
    +Task<IEnumerable<TournamentDto>> GetAll() 
    +Task<TournamentDto?> GetById(int id)
    +Task Create(TournamentDto Tournament)
    +Task Update(TournamentDto TournamentChanges)
    +Task Delete(int id)
}
Tournament <--* ITournamentRepository
TournamentDto <-- ITournamentRepository : Uses

class TournamentRepository {
    -DbContext _context
}
ITournamentRepository <|.. TournamentRepository : implements
@enduml